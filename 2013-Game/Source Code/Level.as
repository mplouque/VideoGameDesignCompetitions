package {		// import any useful classes	import flash.display.MovieClip;	import flash.events.Event;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import ReusableCode.MyMaths;	import flash.ui.Mouse;	import flash.media.Sound;	import flash.media.SoundMixer;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.events.MouseEvent;		public class Level extends MovieClip	{				// variables etc		public var bgSoundChannel:SoundChannel = new SoundChannel();		public var perks:Array;		public var ships:Array;		public var bullets:Array;		public var keys:Array;		public var pauseKey:Boolean;		public var muteKey:Boolean;		protected var explosionSound:Explode;		protected var gameOver:Boolean;		static var lastFramePause:Number;		protected var score:int;		protected var timer:Timer;		protected var spawning:Boolean=false;		protected var counter:int;		protected var numToSpawn:int;		protected var turretLevel:int;		public var isPaused:Boolean;		public static var isMuted:Boolean;		public var bgMusicState:Boolean;		protected var backgroundMusic:bgMusic;		var muteTransform:SoundTransform = new SoundTransform(0, 0);		var unmuteTransform:SoundTransform = new SoundTransform(1, 0);		public var lastContinueButtonFrame:Number;		public var lastContinueButtonClicked:Boolean;		public var moneyPaid:Boolean;		public static var amountOfShots:Number=1;		public static var money:Number=0;		public static var healthRegen:Boolean=false;		public static var energyRegen:Boolean=false;		public static var msTimesClicked:Number=1;		public static var rfTimesClicked:Number=1;		//public var lastAmountOfShots:Number=1;		public var pauseBtnOnTop:Boolean;		public function Level() 		{						//add an event listener to spawn a new ship every frame			addEventListener(Event.ENTER_FRAME, everyFrame);						moneyPaid=false;			ships = new Array();//set up the ship array			bullets = new Array();//set up the bullet array			lastFramePause=1;			isPaused=false;			gameOver=false;			counter=0;			turretLevel=1;			numToSpawn=1;			score=0;//set score to start as 0			perks=new Array();			keys=new Array();			//set up timer to count 3 seconds			timer = new Timer(2500, 1); //3000ms = 3 secs			timer.addEventListener(TimerEvent.TIMER_COMPLETE, beginSpawning);			//start timer			timer.start();			addEventListener(Event.ADDED_TO_STAGE, init);			addEventListener(Event.REMOVED_FROM_STAGE, cleanUp);			explosionSound=new Explode			pauseBtnOnTop=false;			bgMusicState = true;			playBgMusic();			isMuted = false;					}				function cleanUp(e:Event)		{						stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyPressed);			pauseScreen.btnContinue.removeEventListener(MouseEvent.CLICK, pauseScreen.pauseScreenContinue);			pauseScreen.btnRapidFire.removeEventListener(MouseEvent.CLICK, pauseScreen.rapidFire);			pauseScreen.btnMultiShot.removeEventListener(MouseEvent.CLICK, pauseScreen.multiShot);			pauseScreen.btnHealthRegen.removeEventListener(MouseEvent.CLICK, pauseScreen.healthRegen);			pauseScreen.btnEnergyRegen.removeEventListener(MouseEvent.CLICK, pauseScreen.energyRegen);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			removeEventListener(Event.ENTER_FRAME, everyFrame);			Mouse.show();			trace("cleaned up");			//stage.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);				}		/*public function muteRollOver(event:MouseEvent)		{			pauseScreen.mutebutton.gotoAndStop(pauseScreen.mutebutton.buttonState+" Over");		}		public function muteRollOut(event:MouseEvent)		{			pauseScreen.mutebutton.gotoAndStop(pauseScreen.mutebutton.buttonState);		}		public function muteToggle(event:MouseEvent)		{			if (pauseScreen.mutebutton.buttonState == "on")			{				pauseScreen.mutebutton.buttonState = "off";			}			else			{				pauseScreen.mutebutton.buttonState = "on";			}			pauseScreen.mutebutton.gotoAndStop(pauseScreen.mutebutton.buttonState+" Over");		}*/		function keyDownHandler(k:KeyboardEvent):void		{			if (k.keyCode == 80) 			{				if (pauseKey == false)				{					//trace((MovieClip)(root));					pauseKey = true;					isPaused = true;					lastFramePause=2;					//pauseScreen.gotoAndStop(2);					//pauseScreen.mutebutton.buttonState = "on";					pauseScreen.parent.setChildIndex(pauseScreen, pauseScreen.parent.numChildren-1);					//pauseScreen.mutebutton.addEventListener(MouseEvent.CLICK, muteToggle);					//pauseScreen.mutebutton.addEventListener(MouseEvent.MOUSE_OVER, muteRollOver);					//pauseScreen.mutebutton.addEventListener(MouseEvent.MOUSE_OUT, muteRollOut);														}				else				{					pauseKey = false;					isPaused = false;					lastFramePause=1;					//pauseScreen.mutebutton.removeEventListener(MouseEvent.CLICK, muteToggle);					//pauseScreen.mutebutton.removeEventListener(MouseEvent.MOUSE_OVER, muteRollOver);					//pauseScreen.mutebutton.removeEventListener(MouseEvent.MOUSE_OUT, muteRollOut);					//pauseScreen.gotoAndStop(1);										//Movieclip(pauseScreen.parent).setChildIndex(this, Movieclip(pauseScreen.parent).numChildren-1);				}			}			if (k.keyCode == 77)			{				if (muteKey == false)				{					muteKey = true;					trace("muted");					isMuted = true;					bgSoundChannel.soundTransform = muteTransform;													}				else 				{					muteKey = false;					trace("unmuted");					isMuted = false;					bgSoundChannel.soundTransform = unmuteTransform;									}			}		}				/*function keyUpHandler(k:KeyboardEvent):void		{						if (k.keyCode == 80)			{				pauseKey = false;				isPaused=false;			}					}*/								//init function		protected function init(e:Event)		{			Mouse.hide();			//make use of keyboard			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			amountOfShots=1;			money=0;			healthRegen=false;			energyRegen=false;			Turret.MAX_COOLDOWN=10;			//stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);		}				protected function keyPressed(k:KeyboardEvent)		{			if (k.keyCode==Keyboard.E) 			{				keys.push("E");				//			}			if (k.keyCode==Keyboard.F) 			{				keys.push("F");				//			}			if (k.keyCode==Keyboard.C) 			{				keys.push("C");				//			}			if (keys.length==3) 				{ //if we have stored more than 3 keys delete the oldest				if (player.energy>=20) 				{													if (addPerk())						{							player.energy-=20;						}								}				keys=new Array();//wipe array				}		}						//addPerks		protected function addPerk():Boolean		{			//set up switch statement			switch (keys.toString())			{				//use the case of use the 'case of AAA'				case "F,F,F":					perks.push(new perk(player, .3, "bonusFiringSpeed", "RapidFire"));					return true;				case "E,E,E":					perks.push(new perk(player));					return true;				case "E,F,C":					trace("faster energy");					return true;				//default behaivior				default:					trace("thats not a valid combo");					break;			}			return false;					}						//make function to start spawning		protected function beginSpawning(t:TimerEvent)		{			spawning=true;		}				protected function transitionOut(t:TimerEvent) 		{			//make an event					var ev:levelEvent =new levelEvent(levelEvent.GAME_OVER, score);					//dispatch this event					dispatchEvent(ev);		}						public function playBgMusic()		{						if (bgMusicState == true)				{					bgMusicState = false;					backgroundMusic=new bgMusic;					bgSoundChannel = backgroundMusic.play(0, 99);									}				else // turn sound off				{					bgSoundChannel.stop();				}										}		public function doStore()		{			isPaused = true;			if (pauseBtnOnTop==false)			{				pauseScreen.parent.setChildIndex(pauseScreen, pauseScreen.parent.numChildren-1);				pauseBtnOnTop=true;			}			if (moneyPaid==false)			{				money+=1000;				moneyPaid=true;			}			//lastContinueButtonFrame=pauseScreen.continueButtonFrame;			lastContinueButtonClicked=pauseScreen.continueButtonClicked;			lastFramePause=3;										if(pauseScreen.continueButtonClicked==true)				{					lastContinueButtonFrame= pauseScreen.continueButtonFrame;					pauseScreen.gotoAndStop(lastContinueButtonFrame);					lastFramePause=1;					isPaused = false;					score+=1;					pauseScreen.continueButtonClicked=false;					pauseBtnOnTop=false;					moneyPaid=false;									}					}				protected function everyFrame(e:Event)		{						//update hud			healthBar.gotoAndStop(Math.round((player.health/player.MAX_HEALTH)*100));			energyBar.gotoAndStop(Math.round((player.energy/player.MAX_ENERGY)*100));			//move crosshair																		//play background music									crosshair.x=mouseX;			crosshair.y=mouseY;			Mouse.hide();						crosshair.parent.setChildIndex(crosshair, crosshair.parent.numChildren-1);			//pauseToggle();			doTurretLevel();									player.numToShoot=amountOfShots;						//lastAmountOfShots=pauseScreen.amountOfShots;			//player.numToShoot=lastAmountOfShots;												if(gameOver==false && isPaused==false)			{				//spawn ships				doSpawning();																				// handle bullets 				doBullets();								//increase the counter				counter++;								//handle the ships				doShips();							//handle the powerups to the player				doPerks();							//keepTrack of turret Level												//handle the player				player.update();				//check to see if player is dead				if(player.health<=0)				{										gameOver=true;					Mouse.show();					//reuse timer to delay transition to see explosion					timer = new Timer(2500, 1);					timer.addEventListener(TimerEvent.TIMER_COMPLETE, transitionOut);					timer.start();					//spawn explosion chain					var ex = new ExplosionChain(30, 0.3, 60, 20, 45);					  ex.x=player.x;					  ex.y=player.y;					  addChild(ex);//add to the screen					  removeChild(player);//remove from screen					  					  if (isMuted == false)					  {					  	explosionSound.play();					  }					  bgMusicState=false;					  playBgMusic();					 /* for (var i:int = 0; i<aliens.length-1; i++)						{							parent.removeChild(aliens[i]);																			}*/						/*for (var i = 0; i<MovieClip(root).numChildren; i++)						{							var datLevel = MovieClip(root).getChildAt(i);							datLevel.parent.removeChild(datLevel);						}*/					 				}											}												pauseScreen.gotoAndStop(lastFramePause);			//handle score			output.text="Score:"+""+score;						if(lastFramePause==3)			{				pauseScreen.moneyTxt.text= "Money:$"+Level.money;			}			//check for gameover		}				protected function doTurretLevel()		{			levelBar.text="Level:"+""+turretLevel;			if (score>=10)			{				//player.numToShoot=2;				turretLevel=2;				if(score>=30)				{					//player.numToShoot=3;					turretLevel=3;					if(score>=60)					{						//player.numToShoot=3;						turretLevel=4;						if(score>=120)						{							//player.numToShoot=3;							turretLevel=5;						}					}				}							}			if (score==10)			{								player.energy=100;				doStore();				//trace(money);				if(healthRegen==true)					{						player.health=10;						healthRegen=false;					}								}				else if(score==30)				{															player.energy=100;					doStore();					}					else if(score==60)					{						if(healthRegen==true)							{								player.health=10;								healthRegen=false;							}										player.energy=100;						doStore();						}												else if(score==120)						{							if(healthRegen==true)								{									player.health=10;									healthRegen=false;								}											player.energy=100;							doStore();						}		}						public function checkRegen()		{			if(healthRegen==true)			{				player.health=10;				healthRegen=false;			}			if(energyRegen==true)			{				player.energy=100;				energyRegen=false;			}		}				protected function doPerks()		{			//loop through all the perks			for (var i=perks.length-1; i>=0; i--)			{				//update the perk				perks[i].update();								//add or re-add the perks to the screen				addChild(perks[i]);				//posistion the perk				perks[i].x=0;				perks[i].y=stage.stageHeight-15-(i*perks[i].BAR_HEIGHT);				if (perks[i].dead())				{					removeChild(perks[i]);					perks.splice(i,1);				}			}		}				//function to update the ships		protected function doShips()		{			//make a for loop to iterate through ships			for (var count=ships.length-1; count>=0; count--)			{				var sh = ships[count]				sh.update();				//add a new for loop to go through all the bullets.				for (var bcount=bullets.length-1; bcount>=0; bcount--) 				{					// if the bullet is touching the ship					if(MyMaths.hitTest(sh, bullets[bcount])) 						{						   //if we get here it means there's a collision						   sh.health--; //ships lose one health point per hit						   removeChild(bullets[bcount]);						   bullets.splice(bcount, 1);						}				}				//if ship collides with the player				if(MyMaths.hitTest(sh, player)) 				{					//hurt the player					player.health--;					player.energy-=20;					//kill the ship					sh.health=0;				}								//if the ship is dead (0 health) remove from screen				if (sh.health<=0) 				{					 //gain a point					 score++;					 //trace(score); 					 //spawn an explosion chain					 var ex = new ExplosionChain(5, 1, 10, 5, 15);					  ex.x=sh.x;					  ex.y=sh.y;					  addChild(ex);//add to the screen					  removeChild(sh);//remove from screen					  ships.splice(count, 1);//remove from list					  if (isMuted == false)					  {						explosionSound.play();  					  }					  					  					  //if (currentLabel != "game")					  	//{							//SoundMixer.stopAll();						//}					  				}			}		}				protected function doBullets()		{			for (var bcount=bullets.length-1; bcount>=0; bcount--) 			{				//update the bullets				bullets[bcount].update();				if(bullets[bcount].parent==null)				//if the bullet was removed from the screen				{					bullets.splice(bcount, 1);					//remove from the list of bullets					bcount--;				}			}		}				//function handles spawning of ships		protected function doSpawning()		{			if (!spawning) return;						if(counter%400==1) numToSpawn++;									if (counter%200==1)			{ for (var i=0; i<numToSpawn; i++)				{				//make a new instance of the Ship class				var s = new Ship1();				//trace((MovieClip)(root));				//flip a coin and if its tails make a ship 2				if (Math.random()<0.3) 				{					s=new Ship2();					//trace((MovieClip)(root));					if (Math.random()<0.3)					{						s=new MotherShip;						//trace((MovieClip)(root));					}				}				// add the Ship to the Display list				addChild(s);								//posistion and rotate the ship				var rnd:Number = Math.random()*2*Math.PI;				s.x = player.x + Math.cos(rnd)*500;				s.y = player.y + Math.sin(rnd)*500;				s.rotation = Math.random()*360;				//add the ship to the list of ships				ships.push(s);				//trace the length of the array				//trace(ships.length);				}			}		}	}	}