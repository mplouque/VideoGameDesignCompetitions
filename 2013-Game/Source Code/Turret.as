package  {		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import ReusableCode.MyMaths;	import flash.events.KeyboardEvent;	import flash.media.Sound;				public class Turret extends MovieClip 	{				//properties		var velocity:Point = new Point();		public var upKey:Boolean=false;		public var downKey:Boolean=false;		public var leftKey:Boolean=false;		public var rightKey:Boolean=false;		public var health:Number;		private var shotCooldown:Number;		public var bonusFiringSpeed:Number;		private var firing:Boolean=false;		public var numToShoot:int; 		public var bonusShots:int;		public var radius:int=20;		public var energy:Number;		public var fireSound:Sound;		public var spdCounter:Number;		public var lastIsMuted:Boolean;			const DECELLERATION = 0.92;		const SPREAD = 10;		public static var MAX_COOLDOWN = 10;		const MAX_ENERGY = 100;		const MAX_HEALTH = 10;		const MAX_SPEED=8.5;		const ACCELERATION=0.2;		const ROT=4;		const FRICTION=0.98;								public function Turret() 		{			addEventListener(Event.ADDED_TO_STAGE, initialise);			addEventListener(Event.REMOVED_FROM_STAGE, cleanUp);			//cleanup when removed from stage			// constructor code			//set the shot cooldown			shotCooldown = MAX_COOLDOWN;			//set the health to 10			health=MAX_HEALTH;			energy=MAX_ENERGY/2;			// add an event listener to update turret pos every frame			numToShoot=1;//start firing 1 bullet			bonusShots=0;			bonusFiringSpeed=0;//no bonus speed to start			fireSound = new BulletSound();			//event listener for when Turret is added to stage									trace("boo");		}				//keydown handler		 function keyDownHandler(k:KeyboardEvent):void		{			if (k.keyCode == 65) 			{				leftKey = true;			}			if (k.keyCode == 68) 			{				rightKey = true;			}			if (k.keyCode == 87) 			{				upKey = true;			}			if (k.keyCode == 83) 			{				downKey = true;			}								}		//keyup handler		 function keyUpHandler(k:KeyboardEvent):void		{			if (k.keyCode == 65) 			{				leftKey = false;			}			if (k.keyCode == 68) 			{				rightKey =false;			}			if (k.keyCode == 87) 			{				upKey = false;			}			if (k.keyCode == 83) 			{				downKey = false;			}		}				/*public function handleCounter()		{			spdCounter++;					}*/				public function handleTurretMovement()		{			if (upKey == true) 			{				velocity.y+=ACCELERATION*Math.sin((this).rotation/180*Math.PI);				velocity.x+=ACCELERATION*Math.cos((this).rotation/180*Math.PI);				//trace ("w");			}			else if (downKey == true)			{				velocity.x*=DECELLERATION;				velocity.y*=DECELLERATION;				//velocity.y= Math.sqrt((velocity.y*(1-(velocity.y*DECELLERATION)))*(velocity.y*(1-(velocity.y*DECELLERATION))))/180*Math.PI;				//velocity.x= Math.sqrt((velocity.x*(1-(velocity.x*DECELLERATION)))*(velocity.x*(1-(velocity.x*DECELLERATION))))/180*Math.PI;			}			/*else if (downKey == true) 				{					velocity.y-=DECELLERATION*Math.sin((this).rotation/180*Math.PI);					velocity.x-=DECELLERATION*Math.cos((this).rotation/180*Math.PI);					//trace ("s");				}*/				else 				{					velocity.x*=FRICTION;					velocity.y*=FRICTION;									}			/*if (leftKey == true) 			{				(this).rotation+=ROT;				//trace ("a");			}			if (rightKey == true) 			{				(this).rotation+=ROT;				//trace ("d");			}*/			if ((this).x<0) 					{						(this).x=stage.stageWidth;					}				if ((this).x>stage.stageWidth) 					{						(this).x=0;					}				if ((this).y<0) 					{						(this).y=stage.stageHeight;					}				if ((this).y>stage.stageHeight) 					{						(this).y=0;					}											(this).x+=velocity.x;			(this).y+=velocity.y;						var spd = Math.sqrt((velocity.x*velocity.x)+(velocity.y*velocity.y));//gets the hypotenuse of the velocity triangle						if (spd>MAX_SPEED) 				{					//normalize the speed					velocity.y*=(MAX_SPEED/spd);					velocity.x*=(MAX_SPEED/spd);				}					}				public function handleTurretEnergy()		{			energy+=0.2;			//limit energy to the MAX			if (energy>MAX_ENERGY) energy=MAX_ENERGY;		}				public function handleTurretFire()		{			//if holding mouse down			if (firing) 				{					//FIRE!					fire();					//trace("fire");				}		}				public function handleTurretShotCooldown()		{			shotCooldown--;			if (shotCooldown<-1) shotCooldown=-1;		}				public function handleTurretDirection()		{			//make Turret face the mouse			//safeguard for parent			if (parent != null)			{				var o = new Point();				o.x=parent.mouseX;				o.y=parent.mouseY;				rotation = MyMaths.angleBetween(this, o);							}		}					public function update() 		{			//handleCounter();						handleTurretMovement();						handleTurretEnergy();						handleTurretFire();						handleTurretShotCooldown();						handleTurretDirection();						lastIsMuted = Level.isMuted;					}						private function fire()		{			while (shotCooldown<=0)			{				//if allowed to shoot				if (shotCooldown<=0)				{					//reset cool down					shotCooldown+=MAX_COOLDOWN/(1+bonusFiringSpeed);					for (var i=0; i<numToShoot+bonusShots; i++) 					{						//spawn a bullet when fired						var b = new Bullet();						//set pos. and rotation of bullet						b.rotation = rotation-(SPREAD*(numToShoot+bonusShots-1)/2)+(i*SPREAD);						b.x = x;						b.y = y;						//add the bullet to the list of bullets						MovieClip(parent).bullets.push(b);						parent.addChild(b)					}					//play and trace firing animation;					play();					//play the sound					if ( lastIsMuted == false)					{						fireSound.play();					}									}			}		}		function cleanUp(e:Event)		{			stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			//add a mousedown click listener to the stage			stage.removeEventListener(MouseEvent.MOUSE_DOWN, startFire);//add a mousedown click listener to the stage			//add a mouseup click listnener			stage.removeEventListener(MouseEvent.MOUSE_UP, stopFire);											}		function initialise(e:Event)		{			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			//add a mousedown click listener to the stage			stage.addEventListener(MouseEvent.MOUSE_DOWN, startFire);//add a mousedown click listener to the stage			//add a mouseup click listnener			stage.addEventListener(MouseEvent.MOUSE_UP, stopFire);											}		private function startFire(m:MouseEvent) 		{			firing=true;		}		private function stopFire(m:MouseEvent) 		{			firing=false;		}	}	}