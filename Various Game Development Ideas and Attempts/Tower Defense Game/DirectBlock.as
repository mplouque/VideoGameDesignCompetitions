package{	//imports	import flash.display.*;	import flash.events.*;	import flash.geom.*;	public class DirectBlock extends MovieClip	{		//we'll call it a DirectBlock		private var _root:MovieClip;//again, defining a _root		private var directType:String;//what kind of special block is this		private var randomDirection:Number;						//this time, we have to accept some values to make it easier to place, like the type and coordinates		public function DirectBlock(type:String,xVal:int,yVal:int)		{			directType = type;//set the directType so that all other functions can use it			//add the required event listeners			this.addEventListener(Event.ADDED, beginClass);			this.addEventListener(Event.ENTER_FRAME, eFrame);						//setting the coordinates			this.x = xVal;			this.y = yVal;		}		private function beginClass(e:Event):void		{			_root = MovieClip(root);//setting the _root again						//making this into a 25x25 square			this.graphics.beginFill(0x111111);			this.graphics.drawRect(0,0,25,25);			this.graphics.endFill();						if(directType == 'START')			{				//if this is a start block				//then define the startDir and StartCoord based on it's coordinates				if(this.x == 0)				{					_root.startDir = 'RIGHT';					_root.startCoord = this.y;				} else if (this.y == 0)				{					_root.startDir = 'DOWN';					_root.startCoord = this.x;				} else if (this.x == 525)				{					_root.startDir = 'LEFT';					_root.startCoord = this.y;				} else if (this.y == 275)				{					_root.startDir = 'UP';					_root.startCoord = this.x;				} else				{					trace ("doesnt start on edge");					//this level won't work if not any of these values				}			} else if (directType == 'FINISH')			{				//if this is a finish block				//then define the finDir based on it's coordinates				if(this.x == 0)				{					_root.finDir = 'LEFT';				} else if (this.y == 0)				{					_root.finDir = 'UP';				} else if (this.x == 525)				{					_root.finDir = 'RIGHT';				} else if (this.y == 275)				{					_root.finDir = 'DOWN';				}								else 				{					//this level won't work if not any of these values				}			}		}		private function eFrame(e:Event):void		{			randomDirection = Math.floor(Math.random()*2);						if(_root.gameOver == true)			{				//cleanup if game is over				this.removeEventListener(Event.ENTER_FRAME, eFrame);				MovieClip(this.parent).removeChild(this);			}						if(directType != 'START' && directType != 'FINISH')			{				//if this isn't a start of finish block				//then it'll act as a directioning block				for(var i:int = 0;i<_root.enemyHolder.numChildren;i++)				{					//create a loop					var targetEnemy = _root.enemyHolder.getChildAt(i);//this will hold a certain enemy					//if the targetEnemy's coordinates are too close to this block					if(this.x >= targetEnemy.x - targetEnemy.width*.5 && this.x <= targetEnemy.x + targetEnemy.width*.5					&& this.y >= targetEnemy.y - targetEnemy.height*.5 && this.y <= targetEnemy.y + targetEnemy.height*.5)					{						//then move the enemy's direction based on what direction this block points to						if(directType == 'UP')						{							targetEnemy.xSpeed = 0;							targetEnemy.ySpeed = -targetEnemy.maxSpeed;							targetEnemy.hasDirectionSelected=false;						} else if(directType == 'RIGHT')						{							targetEnemy.xSpeed = targetEnemy.maxSpeed;							targetEnemy.ySpeed = 0;							targetEnemy.hasDirectionSelected=false;						} else if(directType == 'DOWN')						{							targetEnemy.xSpeed = 0;							targetEnemy.ySpeed = targetEnemy.maxSpeed;							targetEnemy.hasDirectionSelected=false;						} else if(directType == 'LEFT')						{							targetEnemy.xSpeed = -targetEnemy.maxSpeed;							targetEnemy.ySpeed = 0;							targetEnemy.hasDirectionSelected=false;						}						else if (directType == 'UP or DOWN' && targetEnemy.hasDirectionSelected==false)						{							if(randomDirection==0)							{								targetEnemy.xSpeed = 0;								targetEnemy.ySpeed = -targetEnemy.maxSpeed;								targetEnemy.hasDirectionSelected=true;							}							else if (randomDirection==1)							{								targetEnemy.xSpeed = 0;								targetEnemy.ySpeed = targetEnemy.maxSpeed;								targetEnemy.hasDirectionSelected=true;							}						}						else if (directType == 'RIGHT or LEFT' && targetEnemy.hasDirectionSelected==false)						{							if(randomDirection==0)							{																trace(randomDirection);								targetEnemy.xSpeed = targetEnemy.maxSpeed;								targetEnemy.ySpeed = 0;								targetEnemy.hasDirectionSelected=true;																															}							else if(randomDirection==1)							{								trace(randomDirection);								targetEnemy.xSpeed = -targetEnemy.maxSpeed;								targetEnemy.ySpeed = 0;								targetEnemy.hasDirectionSelected=true;																							}													}											}									}			}		}	}}