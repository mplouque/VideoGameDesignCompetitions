package {		import flash.display.MovieClip;	import flash.events.Event;	import fl.transitions.TweenEvent;	import fl.transitions.easing.*;	import flash.events.Event;	import fl.transitions.Tween;	import flash.events.MouseEvent;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.system.System;	import flash.media.SoundMixer;	import RatoratoryCrosses;	import RatoratoryTutorial;	import RatoratoryPyramid;	import RatoratoryShapes;	import RatoratoryPortals;				public class Main extends MovieClip	{				private var lastScore:int; //use to remember the last score		private var tweens:Array;		private var targetFrame:String;		private var proTipTimer:Timer;		private var proTips:Array;		private var lastTipIndex:int;		public var soundOn:Boolean;		public var knightLevel1Available:Boolean;		public var knightLevel2Available:Boolean;		public var knightLevel3Available:Boolean;		public var knightLevel4Available:Boolean;		public var knightLevel5Available:Boolean;		public var level1Available:Boolean;		public var level2Available:Boolean;		public var level3Available:Boolean;		public var level4Available:Boolean;		public var level5Available:Boolean;				public function Main() 		{			targetFrame="Menu";			soundOn = true;			level1Available=false;			level2Available=false;			level3Available=false;			level4Available=false;			level5Available=false;			knightLevel1Available=false;			knightLevel2Available=false;			knightLevel3Available=false;			knightLevel4Available=false;			knightLevel5Available=false;			//add sime protips to th list			//proTips=new Array();			/*proTips.push("Did you Know? Pluto is not a planet? Pluto is a dwarf planet!");			proTips.push("Did you know? Because light takes time to travel, when you look at the sun from the earth you are actually seeing what the sun looked like 8 minutes ago!");			proTips.push("Did you know that water is necessary for life? Both our moon and Mars have water on them, just in ice form!");			lastTipIndex=-1;*/		}																/*private function newProTip(t:TimerEvent)		{			if (currentLabel != "Menu") {				//set protip timer looping			//loop indefinately			proTipTimer.removeEventListener(TimerEvent.TIMER, newProTip);// event listener			proTipTimer.stop();			return;			}			do 				{					var tipIndex=Math.floor(Math.random()*proTips.length)				} 			while (tipIndex == lastTipIndex);			var tip:String = proTips[tipIndex];			lastTipIndex=tipIndex;			//trace(tip);			theProTip.text == tip;					}*/					//make doGameOver		/*function doGameOver(e:levelEvent) 		{			//set lst score to be score from custom level event			lastScore=e.score;			targetFrame="gameover"						//trace("event recieved");			level.removeEventListener(levelEvent.GAME_OVER, doGameOver);						tweenOut();		}*/				private function gotoLabel(desiredLabel:String)		{			for (var i=0; i<currentLabels.length; i++)			{				if (currentLabels[i].name == desiredLabel) 				{					gotoAndPlay(desiredLabel);					return;				}			}		}		private function mainMainMenu(m:MouseEvent) 		{			targetFrame="MainMainMenu";			gotoLabel(targetFrame);			//tweenOut();		}		private function startKnightSpireGame(m:MouseEvent) 		{			targetFrame="knightAnimation";			gotoLabel(targetFrame);			//tweenOut();					}		private function mainMenuKnightSpire(m:MouseEvent) 		{			targetFrame="KnightSpireMenu";			gotoLabel(targetFrame);			//tweenOut();					}		private function mainMenuKnightSpireWin(m:MouseEvent) 		{			targetFrame="KnightSpireMenu";			//gotoLabel(targetFrame);			tweenOut();					}				private function startRatoratoryGame(m:MouseEvent) 		{			targetFrame="Story";			gotoLabel(targetFrame);			//tweenOut();		}		private function startGame() 		{			targetFrame="levelselect";			gotoLabel(targetFrame);			level1Available=true;			//tweenOut();		}		private function startKnightGame(m:MouseEvent) 		{			targetFrame="knightlevelselect";			gotoLabel(targetFrame);			knightLevel1Available=true;			//tweenOut();		}		private function startKnightGameLose(m:MouseEvent) 		{			targetFrame="knightlevelselect";			//gotoLabel(targetFrame);			//knightLevel1Available=true;			tweenOut();		}		private function Instructions1Knight(m:MouseEvent) 		{			targetFrame="Instructions1Knight";			tweenOut();		}		private function InstructionsKnight(m:MouseEvent) 		{			targetFrame="Instructions1Knight";			gotoLabel(targetFrame);		}		private function Instructions2Knight(m:MouseEvent) 		{			targetFrame="Instructions2Knight";			tweenOut();		}		private function Instructions3Knight(m:MouseEvent) 		{			targetFrame="Instructions3Knight";			tweenOut();		}		private function startGameTrans(m:MouseEvent) 		{			targetFrame="MenuTransStart";			gotoLabel(targetFrame);			level1Available=true;			//tweenOut();		}		private function Instructions1(m:MouseEvent) 		{			targetFrame="Instructions1";			gotoLabel(targetFrame);			//tweenOut();		}		private function instructionsTrans(m:MouseEvent) 		{			targetFrame="MenuTransInstructions";			gotoLabel(targetFrame);			//tweenOut();		}		private function instructionsAfterTrans() 		{			targetFrame="Instructions1";			gotoLabel(targetFrame);			//tweenOut();		}		private function Instructions1Normal(m:MouseEvent) 		{			targetFrame="Instructions1";			tweenOut();		}		private function Instructions2(m:MouseEvent) 		{			targetFrame="Instructions2";			tweenOut();		}		private function Instructions3(m:MouseEvent) 		{			targetFrame="Instructions3";			tweenOut();		}		private function mainMenu(m:MouseEvent) 		{			targetFrame="Menu";			tweenOut();		}		private function startLevel1(m:MouseEvent)		{			//targetFrame="level1";			gotoAndPlay("level1");			if (lockLvl2 != null)			{				lockLvl2.parent.removeChild(lockLvl2);			}			if (lockLvl3 != null)			{				lockLvl3.parent.removeChild(lockLvl3);			}			if (lockLvl4 != null)			{				lockLvl4.parent.removeChild(lockLvl4);			}			if (lockLvl5 != null)			{				lockLvl5.parent.removeChild(lockLvl5);			}						//tweenOut();		}		private function startLevel2(m:MouseEvent)		{			gotoAndPlay("level2");			if (lockLvl3 != null)			{				lockLvl3.parent.removeChild(lockLvl3);			}			if (lockLvl4 != null)			{				lockLvl4.parent.removeChild(lockLvl4);			}			if (lockLvl5 != null)			{				lockLvl5.parent.removeChild(lockLvl5);			}		}		private function startLevel3(m:MouseEvent)		{			gotoAndPlay("level3");						if (lockLvl4 != null)			{				lockLvl4.parent.removeChild(lockLvl4);			}			if (lockLvl5 != null)			{				lockLvl5.parent.removeChild(lockLvl5);			}		}		private function startLevel4(m:MouseEvent)		{			gotoAndPlay("level4");						if (lockLvl5 != null)			{				lockLvl5.parent.removeChild(lockLvl5);			}		}		private function startLevel5(m:MouseEvent)		{			gotoAndPlay("level5");					}		private function startLevel1Knight(m:MouseEvent)		{			//targetFrame="level1GameKnight";			//gotoLabel(targetFrame);			gotoAndPlay("level1Knight");			if (knightLockLvl2 != null)			{				knightLockLvl2.parent.removeChild(knightLockLvl2);			}			if (knightLockLvl3 != null)			{				knightLockLvl3.parent.removeChild(knightLockLvl3);			}			if (knightLockLvl4 != null)			{				knightLockLvl4.parent.removeChild(knightLockLvl4);			}			if (knightLockLvl5 != null)			{				knightLockLvl5.parent.removeChild(knightLockLvl5);			}						//tweenOut();		}		private function startLevel2Knight(m:MouseEvent)		{			//targetFrame="level2GameKnight";			//gotoLabel(targetFrame);			gotoAndPlay("level2Knight");			if (knightLockLvl3 != null)			{				knightLockLvl3.parent.removeChild(knightLockLvl3);			}			if (knightLockLvl4 != null)			{				knightLockLvl4.parent.removeChild(knightLockLvl4);			}			if (knightLockLvl5 != null)			{				knightLockLvl5.parent.removeChild(knightLockLvl5);			}		}		private function startLevel3Knight(m:MouseEvent)		{			//targetFrame="level3GameKnight";			//gotoLabel(targetFrame);			gotoAndPlay("level3Knight");						if (knightLockLvl4 != null)			{				knightLockLvl4.parent.removeChild(knightLockLvl4);			}			if (knightLockLvl5 != null)			{				knightLockLvl5.parent.removeChild(knightLockLvl5);			}		}		private function startLevel4Knight(m:MouseEvent)		{			//targetFrame="level4GameKnight";			//gotoLabel(targetFrame);			gotoAndPlay("level4Knight");						if (knightLockLvl5 != null)			{				knightLockLvl5.parent.removeChild(lockLvl5);			}		}		private function startLevel5Knight(m:MouseEvent)		{			gotoAndPlay("level5Knight");			//targetFrame="level5GameKnight";			//gotoLabel(targetFrame);			if (knightLockLvl2 != null)			{				knightLockLvl2.parent.removeChild(knightLockLvl2);			}			if (knightLockLvl3 != null)			{				knightLockLvl3.parent.removeChild(knightLockLvl3);			}			if (knightLockLvl4 != null)			{				knightLockLvl4.parent.removeChild(knightLockLvl4);			}			if (knightLockLvl5 != null)			{				knightLockLvl5.parent.removeChild(knightLockLvl5);			}		}		public function winScreen()		{			gotoAndPlay("winScreen");					}		public function winScreenKnight()		{			gotoAndPlay("youwinknight");					}		private function Restart(m:MouseEvent)		{			targetFrame="Menu";			tweenOut();		}		private function skipToMenu(m:MouseEvent) 			{				targetFrame="menu";				gotoLabel(targetFrame);							}				private function back(m:MouseEvent) 			{				targetFrame="menu";				tweenOut();			}					private function back2(m:MouseEvent) 			{				targetFrame="Instructions";				tweenOut();			}		private function back3(m:MouseEvent) 			{				targetFrame="intro2";				tweenOut();			}		private function back4(m:MouseEvent) 			{				targetFrame="intro3";				tweenOut();			}		private function intro2 (m:MouseEvent)			{				targetFrame="intro2";				tweenOut();			}		private function intro3 (m:MouseEvent)			{				targetFrame="intro3";				tweenOut();			}		private function intro4 (m:MouseEvent)			{				targetFrame="intro4";				tweenOut();			}		private function restartGame(m:MouseEvent) 			{				targetFrame="game";				tweenOut();			} 				private function startInstructions(m:MouseEvent) 			{				targetFrame="Instructions";				tweenOut();				}				private function learnMore(m:MouseEvent) 			{				targetFrame="lm1";				tweenOut();			}					private function learnMore2(m:MouseEvent) 			{				targetFrame="lm2";				tweenOut();			}		private function learnMore3(m:MouseEvent) 			{				targetFrame="lm3";				tweenOut();			}				private function tweenIn() 		{						//make tweens a new array			tweens = new Array();			//loop through all on screen content			for (var i=0; i<numChildren; i++)			{				//make a reference to the current object				var ob = getChildAt(i);				//make a tween for the current object				var tw:Tween = new Tween(ob, //onject to tween										 "z", ///property to tween										 Elastic.easeInOut, //easing function to use										 ob.z-stage.stageWidth, //start value										 ob.z, //end value										 20+(i*5)); //time to take 				//add the tween to the list of tweens				tweens.push(tw);									 			}		 }		 		 		 private function tweenInGame() 		{			//make tweens a new array			tweens = new Array();			//loop through all on screen content			for (var i=0; i<numChildren; i++)			{				//make a reference to the current object				var ob = getChildAt(i);				//make a tween for the current object				var tw:Tween = new Tween(ob, //onject to tween										 "x", ///property to tween										 Elastic.easeInOut, //easing function to use										 ob.x-stage.stageWidth, //start value										 ob.x, //end value										 30+(i*10)); //time to take 				//add the tween to the list of tweens				tweens.push(tw);									 			}		 }		 private function tweenInGameOver() 		{						//make tweens a new array			tweens = new Array();			//loop through all on screen content			for (var i=0; i<numChildren; i++)			{				//make a reference to the current object				var ob = getChildAt(i);				//make a tween for the current object				var tw:Tween = new Tween(ob, //onject to tween										 "z", ///property to tween										 Elastic.easeInOut, //easing function to use										 ob.z-stage.stageWidth, //start value										 ob.z, //end value										 20+(i*10)); //time to take 				//add the tween to the list of tweens				tweens.push(tw);									 			}		 }		 		 private function tweenInInstructions() 		{			//make tweens a new array			tweens = new Array();			//loop through all on screen content			for (var i=0; i<numChildren; i++)			{				//make a reference to the current object				var ob = getChildAt(i);				//make a tween for the current object				var tw:Tween = new Tween(ob, //onject to tween										 "x", ///property to tween										 Elastic.easeInOut, //easing function to use										 ob.x+stage.stageWidth, //start value										 ob.x, //end value										 15+(i*5)); //time to take 				//add the tween to the list of tweens				tweens.push(tw);									 			}		}		private function tweenOut() 		{ //yoyo the existing tweens		  //loop through all on screen content			for (var i=0; i<tweens.length; i++)			{				//yoyo the tweens 				tweens[i].yoyo();				//if this is the last tween				if (i==tweens.length-1)				{					tweens[i].addEventListener(TweenEvent.MOTION_FINISH, tweenedOut);				}			}		}				private function tweenedOut(t:TweenEvent)		{			System.gc();			gotoLabel(targetFrame);					}							}	}